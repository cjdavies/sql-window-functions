Tools and demo database

I'll be using the PostgreSQL relational database management system for all demos and challenges. To save my throat and your time, I'm going to use the term database instead of relational database management system, and Postgres instead of PostgreSQL. Postgres offers one of the richest window function support among all mainstream databases. And I reserve the right to mention other databases whose implementation differences may be a value or just to publicly shame them. I'll be using Microsoft Azure data studio integrated development environment with a Postgres extension. If you don't have access to an instance of Postgres, you can still use an online query service. These services requires zero installation, they're 100% a web based, and even the server is hosted by the service providers. You might be familiar with some of these like SQL Fiddle, DB Fiddle and Rextester to name a few. My favorite one, however, is DB Fiddle UK. DB Fiddle UK has proven to be highly reliable and free of commercial interests, qualities that some of the other services have. How shall I put it nicely? Not always excelled at. I consider using one of the existing sample databases that are out there. And while it was very tempting to use an off-the-shelf database, I chose to create a new one specifically for this series. I used this opportunity to demonstrate some of my design choices using a topic that is near and dear to my heart, helping animals in need. So, I hereby proudly introduce the animal shelter demo database. At first glance, you might find it somewhat odd. First, I chose to use natural and intelligent keys for all tables. This means you will find no magical IDs, identities, auto increment, sequences, or any type of surrogate key. For example, the animal's table uses a composite key that consists of species and names. This is what the shelter staff use to uniquely identify each animal. This means we can have two animals of different species with the same name. This also means that all other tables reference animals using their natural identifier thus saving numerous joints and simplifying queries. Natural versus surrogate keys is a controversial topic with near religious opinions. I find the abuse of surrogate keys for every table in every database to be one of the most destructive habits ever to plague relational database world. I realized that surrogate keys have their place and can be useful, but they should never be used as a default, one size fits all solution for every single table. Worse, is that this notion got so deeply rooted that I see most database designers these days don't even consider the business keys. They just immediately opt for whatever, table name, underscore ID and there you go. There's your primary key. This has devastating results for data consistency, query convolution, workload performance, modularity, scalability, concurrency and I can go on and on. I would love to release a course dedicated to this topic. So please let me know in the Q&A section if you find this topic interesting and would like to see a course about it. For now, all that I ask is that you take it for what it is. Just see for yourself how simple, elegant and efficient SQL becomes when you work against tables that use natural keys. To fit this database in DB Fiddle, I use the subset of the tables from the full project with only a few hundred rows of data. If you visit the Github project page, you'll see that I've included many more reference data tables. These are a must have for any external authority data. States, cities, zip codes, calendar holidays, species, breeds, and even color names, they're all standardized datasets that must be enforced through out your data model. For this course, I've included only the colors and species tables. And if you look closely, you'll see that they both consist of just a single column, that is, their primary key. To some of you, it may seem redundant, but it's anything but. Having a standardized reference set of external authority data that all our entities can reference, guarantees that we will never have misspells, nonstandard or non-existing attributes, values. We're going to cover the individual tables as we go along.