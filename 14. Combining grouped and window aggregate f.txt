Combining grouped and window aggregate functions

Look at this query and try to see if you can guess it's results. I took the liberty of providing the result of the group aggregate COUNT (*) but what is the result of the window COUNT (*) function? Pause the video for a minute and see if you can figure it out. The COUNT(*) group aggregate function evaluated each row group. It had access to the individual rows within the group and being an aggregate function, it did its magic and returned a single value, the number of rows in the group. The COUNT (*) window function doesn't have that privilege. It is not a group function and is treated like any other select expression. It does have access to all three row groups and the empty over clause makes the entire set visible to the function. So the count of all row groups is three and it's going to be true for every single group. Let's push it one step further. What will happen if I'll use COUNT (Name) instead of COUNT (*)? Pause the video for a minute and see if you can figure it out. And the winner is, error. This query is logically invalid, the database will complain that name is not a group by expression and it is not contained in an aggregate function. The window aggregate count doesn't have access to the individual rows within each group and for name to make sense in this context, it must return a single value per group. What function would you use to count how many non-null names we have in total for all species? Ignore the fact that there are no-null names as it's part of the key but assume there may be. Once again, pause the video for a minute and see if you can figure it out. We must use a group aggregate function to guarantee a single value per row group. A window aggregate SUM over the grouped aggregate count of each group will do the trick. Does it make sense now? This is another confusing aspect of window functions and I often see experienced smart developers struggle, it's all about processing order and scope. We need to create a query to report monthly adoption fees revenue. The query needs to show every month and every year with adoptions, the total monthly adoption fees and the percent of this month's revenue from the total annual revenue for the same year. First thing we need is to group by year and month. And at this point, we can no longer use select star, you know we can only reference the group by expressions and use group aggregate functions on all others. To calculate the monthly totals, we'll use the sum group aggregate function, provide descriptive aliases and I'll add an order by just as a visual aid and we're halfway there. We see each month of each year alongside the total monthly adoption fee. Now for the annual percent. The formula for calculating percentage is 100 multiplied by the monthly total and divided by the annual total, to get the annual totals we need to look beyond the current row by defining a window partition by year. We can't reuse the alias, we just defined due to the all at once principle so we have to copy the entire expression. Beware of the lurking pitfall. I won't make you guess this time. Using SUM adoption fee as a window function will be rewarded with the infamous error, adoption fee must appear in the group by clause or in an aggregate function. There may be multiple adoption fees for each month so it doesn't make sense. We need to tell the database which adoption fee we are after with a group aggregate function. And to do that, we need to use a window SUM of the group SUM of adoption fees. This query is valid and returns the desired result. However, this monstrous expression isn't the prettiest manifestation of SQL and if you find it confusing and hard to read, you're not alone. Therefore, I recommend separating the grouped query from the window function with a common table expression to improve its readability. First, define the group query in a CTE, then add the window function percent calculation using the aliases just defined in the CT. This is slightly longer but much clearer for you and whoever needs to read your code in the future. Now it's your turn to fly solo.
