Aggregate grouped functions

Up until now, I've used Aggregate window functions as my go-to examples. That was deliberate. As aggregates seemed to be the most intuitive and familiar for most developers. However, this apparent familiarity is a double-edged sword that manages to confuse even the most experienced developers. And yes, I know I covered it already and still I would like to spend two more minutes refreshing group by processing and emphasize the difference between group aggregate and Window aggregate functions. First, the animal's table is evaluated by the FROM clause. It is then passed to the GROUP BY clause. GROUP BY marks all rows for grouping based on the grouping expression species in this case. Our set is then transformed from its normal table like shape into a hybrid structure where each group of unique species rows will correspond to a single output row. Instead of nine individual source rows we're now dealing with three-row groups. This funny-looking set is delivered to the SELECT clause. SELECT evaluates all expressions as usual. Since this query has a GROUP BY clause, the expressions are evaluated per row group. This returns three rows and their respective group counts. Without the group identifiers they don't tell us much so let's add species to the SELECT. And now we see species alongside their counts. Much better. Remember that species makes sense here only because it is the GROUP BY expression. It is the group identifier and is therefore guaranteed to have the same value for all rows within the group. What will happen if we add name to the SELECT? The query is no longer valid and will return an error. As unlike species, name may have multiple values for a group. The output still consist of one row per group so which cat should be returned? Felix or Calvin. The only way to guarantee that non-grouping expressions return a single value for each group is to wrap them in an aggregate function and that is the definition of an aggregate function. A function that takes in a set of elements, aggregates, and returns just one max name is a valid expression and this query will return Felix, Winston, and Milly. To sum things up, Aggregate window functions are defined with the OVER clause. They see all the rows or row groups as defined by their window specification. They don't see individual rows within each row group. Group aggregate functions are a different based. They can be used in the having, select, and order by clauses. They see individual rows within each group, but they can't see any row groups other than their own. Keep this important distinction in mind. You will thank me for it very soon.
