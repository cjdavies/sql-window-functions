Solution - Rank window functions

First, let's figure out the species average temperatures and every measurement's difference from it. I chose to use an aggregate window function partitioned by species and subtracted from the current temperature. Well, I could've separated this into two CTEs to avoid repeating the function. I believe that by now you should be comfortable enough with a bit more logic in each CTE. A reasonable alternative is to first calculate all the averages per species with a grouped query, and join it to routine checkups. It makes calculating the difference a bit more direct. At the bottom of the solution code file you will find an alternative query that uses the same steps as I'm about to show you for this one using slightly different syntax and features. The next step is calculating whether a measurement's difference from the average constitutes an exception or not. I chose to use the integers one and zero to differentiate exceptions from non-exceptions, and you'll see in a minute why. The absolute function is needed to account for both positive and negative differences. I used the Boolean exception indicator for the alternative query with a count aggregate just for fun. Check it out. Now that I have all exceptions, I can count how many of these each animal experienced. Grouped by species and name will group all checkups to one row, group, or animal. A grouped sum aggregate will sum up all the ones and zeroes we just calculated for the total number of exceptions per animal. The requirement is to sort by the latest checkup time for animals whose number of exceptions are the same. Using a max checkup time we won't do, as it will include rows for which the checkup times are not necessarily exceptions. And to work around it, I used the case conditional expression that returns checkup times only for exception rows. Nearly done. Now I have each animal's number of exceptions and its latest exception date. Time to segment the results into four roughly equal segments per species. NTILE 4, partition by species, ordered by the number of exceptions, and a tiebreaker of the latest exception time in descending order will do the trick. All that's left is to filter for the first segment, the one that got assigned an NTILE value of one that represents the lowest number of exceptions sorted nicely, and that's about it. For the alternative query at the bottom of the file I used percent rank instead of NTILE. Make sure to check it out. I also left a question for you there. See if you can figure that one out, too. And now we're off to offset window functions.