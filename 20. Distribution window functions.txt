Distribution window functions

A cumulative distribution function, describes the probability that our random variable X evaluated at n, we'll take a value that is less than or equal to n. As a highly simplified example, consider a standard six side playing dice. Each side has a unique integer value between one and six and has a roll probability of 1/6. The cumulative distribution for rolling a value that is equal to or smaller than one is 1/6. The probability for rolling a value that is equal to or smaller than two is the sum of the previous and the current probabilities 2/6 or 1/3, similarly for a three, the permeability is 1/2 and so on up to one. One represents the probability of rolling a value that is equal to or smaller than six and that is a certainty. The NCC equal standard defines distribution window functions as functions that compute a relative rank over a row R, within a window partition of R, expressed as an approximate numeric ratio between 0.0 and 1.0. SQL supports two variants of distribution window functions, percent rank and cumulative distribution. Their syntax is similar to that of ranking dense rank, both functions take no arguments, have an optional partition by clause and the mandatory order by clause. Let's use the same highly simplified dice example to see how each function is evaluated. In a window partition, each side of the dice is a row R the window is sorted by the rows integer values in ascending order. Cumulative distribution evaluate the relative rank over row, Rn as Np of N divided by NR. Np of N is the number of rows proceeding or peer with Rn and NR is the total number of rows in the partition. For example, row two has two rows that proceed, or peer it divided by the total number of rows, which is six evaluates to 1/3. Percent rank evaluates the relative rank of a row Rn, as the rank value of Rn minus one, divided by NR minus one. Present rank evaluates to relative ranks that much like cumulative distribution and with a one, but it begins with a zero. For example, rows two rank is two, minus one is one divided by the total number of rows six minus one is 1/5. Let's have some fun with statistical weight analysis of our animals. An animal's weight may vary between measurements. So first let's average it with a group aggregate query, an order by for both species and average weight in descending order will cause the rabbits to show up first with the heaviest ones on top. Now, the reason I'm doing this is because there are fewer rabbits, which is going to make our visual reference a little easier. Like before, let's wrap the group query in a CTE for convenience and select from the CTE, let's add both percent rank and cumulative distribution window functions, partitioned by species and ordered by the average wait and execute. The order by for the window function is an opposite sort of direction to the one used for presentation order but of course it doesn't affect the results. April is our chubbiest rabbit at nearly seven pounds, both percent track and cumulative distribution assigned her a perfect one as all other rabbits are lighter. Peanut is our lightest rabbit at 3.13 pounds, and her name suits her very well. Percent rank assigned peanut is zero as there are no lighter rabbits while the cumulative distribution assigned a value, which is slightly higher than zero. If you're a statistician or a data analyst, you're probably find these extremely useful. Unfortunately, I am neither so I'm going to leave it at that and proceed right onto this chapter's challenge.